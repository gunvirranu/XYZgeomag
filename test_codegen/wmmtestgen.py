"""This is a simple script to generate C++ catch2 tests."""
import pymap3d as pm
import numpy as np

HEADER_TEMPLATE = """\
// {} Generated by python script `wmmtestgen.py`

// This tells Catch to provide a main() - only do this in one cpp file
#define CATCH_CONFIG_MAIN
#include "catch.hpp"

extern "C" {{
    #include "../{}"
}}
"""

TEST_CASE_TEMPLATE = """
TEST_CASE( "geomag test {} of WMM2020 model", "[geomag]" ) {{
    const double in[3] = {{{}, {}, {}}};
    double out[3];
    double truth[3] = {{{}, {}, {}}};
    geomag({}, &in, &out);
    CHECK( out[0]*1E9 == Approx(truth[0]*1E9).margin({}) );
    CHECK( out[1]*1E9 == Approx(truth[1]*1E9).margin({}) );
    CHECK( out[2]*1E9 == Approx(truth[2]*1E9).margin({}) );
}}
"""

def main(header_to_test, dates, heights, lats, lons, bns, bes, bds, margin):
    """Create and write catch2 tests as a C++ source file to test
    header_to_test defining the WMM coefficents and model.

    Args:
        header_to_test (str): the C header file with the model
        dates (ndarray): Decimal test years
        heights (ndarray): Test heights (km) with respect to WGS-84 ellipsoid
        lats (ndarray): Test latitude (deg)
        lons (ndarray): Test longitude (deg)
        bns (ndarray): Test X (local north) magnetic field (nT)
        bes (ndarray): Test Y (local east) magnetic field (nT)
        bds (ndarray): Test Z (local down) magnetic field (nT)
        margin (float): Acceptable error in each component (nT)
    """
    xs, ys, zs = pm.geodetic2ecef(lats, lons, heights * 1000)
    bxs, bys, bzs = pm.enu2uvw(bes * 1e-9, bns * 1e-9, -bds * 1e-9, lats, lons)

    file_name = header_to_test[:-2] + "_test.cpp"
    outstr = HEADER_TEMPLATE.format(file_name, header_to_test)
    for i in range(len(xs)):
        testcase = TEST_CASE_TEMPLATE.format(
            i,
            repr(xs[i]), repr(ys[i]), repr(zs[i]),
            repr(bxs[i]), repr(bys[i]), repr(bzs[i]),
            dates[i],
            margin, margin, margin
        )
        outstr += testcase

    with open(file_name, 'w') as f:
        f.write(outstr)

if __name__ == "__main__":
    header_to_test = "geomag.h"
    dates = [2020] * 6 + [2022.5] * 6
    heights = [0] * 3 + [100] * 3 + [0] * 3 + [100] * 3
    lats = [80, 0, -80] * 4
    lons = [0, 120, 240] * 4
    bns = [6570.4,39624.3,5940.6,6261.8,37636.7,5744.9,6529.9,39684.7,6016.5,6224.0,37694.0,5815.0]
    bes = [-146.3,109.9,15772.1,-185.5,104.9,14799.5,1.1,-42.2,15776.7,-44.5,-35.3,14803.0]
    bds = [54606.0,-10932.5,-52480.8,52429.1,-10474.8,-49969.4,54713.4,-10809.5,-52251.6,52527.0,-10362.0,-49755.3]
    margin = 0.05 # (nT) error acceptable
    main(
        header_to_test,
        np.array(dates),
        np.array(heights),
        np.array(lats),
        np.array(lons),
        np.array(bns),
        np.array(bes),
        np.array(bds),
        margin
    )
